#!/usr/bin/make -f

NAME := $(shell awk '/^Name:/{print $$2}' META)
VERSION := $(shell awk '/^Version:/{print $$2}' META)

DKMSFILES := module include config Makefile.in autogen.sh dkms.conf.in zfs.release.in META zfs_config.h

%:
	dh $@ --with dkms --with autoreconf

override_dh_autoreconf:
	dh_autoreconf ./autogen.sh

override_dh_auto_configure:
	# Build the userland, but don't build the kernel modules.
	./configure \
	  --prefix='' \
	  --libexecdir=/usr/libexec \
	  --libdir=/lib \
	  --includedir=/usr/include \
	  --datarootdir=/usr/share \
	  --with-config=user

override_dh_auto_test:
	# The dh_auto_test rule is disabled because
	# `make check` cannot run in an unprivileged build environment.

override_dh_auto_install:
	# Install the utilities.
	$(MAKE) install DESTDIR='$(CURDIR)/debian/tmp'

	# Get a bare copy of the source code for DKMS.
	# This creates the $(CURDIR)/$(NAME)-$(VERSION)/ tree, which does not
	# contain the userland sources.
	$(MAKE) distdir

	# Install the DKMS source: We only want the files needed to build the modules
	mkdir -p '$(CURDIR)/debian/tmp/usr/src/$(NAME)-$(VERSION)'
	$(foreach file,$(DKMSFILES),mv '$(CURDIR)/$(NAME)-$(VERSION)/$(file)' '$(CURDIR)/debian/tmp/usr/src/$(NAME)-$(VERSION)';)
	# Hellish awk line:
	#  * Deletes from configure.ac the parts not needed for building the kernel module
	#     * It deletes from inside AC_CONFIG_FILES([]) everything except:
	#        (Makefile$|include/|module/|*.release$|dkms.conf$)
	#  * Takes care of spaces and tabs
	awk '/^AC_CONFIG_FILES\(\[/,/^\]\)/ { if ($$0 !~ /^(AC_CONFIG_FILES\(\[([ \t]+)?$$|\]\)([ \t]+)?$$|([ \t]+)?(include\/|module\/|Makefile([ \t]+)?$$|zfs\.release([ \t]+)?$$|dkms\.conf([ \t]+)?$$))/){next} } {print}' \
		'$(CURDIR)/$(NAME)-$(VERSION)/configure.ac' > '$(CURDIR)/debian/tmp/usr/src/$(NAME)-$(VERSION)/configure.ac'
	cp '$(CURDIR)/autogen.sh' '$(CURDIR)/debian/tmp/usr/src/$(NAME)-$(VERSION)'
	cd '$(CURDIR)/debian/tmp/usr/src/$(NAME)-$(VERSION)'; ./autogen.sh
	rm -fr '$(CURDIR)/debian/tmp/usr/src/$(NAME)-$(VERSION)/autom4te.cache'

	# This hack allows DKMS to install the Module.symvers and zfs_config.h
	# files to the ${dkms_tree} area through the POST_INSTALL directive.
	echo '#!/bin/sh'  >'$(CURDIR)/debian/tmp/usr/src/$(NAME)-$(VERSION)/cp'
	echo 'cp "$$@"'  >>'$(CURDIR)/debian/tmp/usr/src/$(NAME)-$(VERSION)/cp'
	chmod 755 '$(CURDIR)/debian/tmp/usr/src/$(NAME)-$(VERSION)/cp'

override_dh_dkms:
	dh_dkms -V $(VERSION)

override_dh_installinit:
	# /etc/init.d/zfs should be a system initialization-and-shutdown script.
	# This means starting at runlevel S and stopping at runlevels 0 and 6.
	# Debian runs local mounts at sysv sequences [10..13] [08..09].
	dh_installinit --name=zfs --no-restart-on-upgrade --no-start \
		--  start 13 S . stop 09 0 6 .

override_dh_installexamples:
	dh_installexamples -XMakefile -X.gitignore

override_dh_shlibdeps:
	# Suppress libtool dependency_libs warnings that are caused by
	# inter-library dependencies.  (eg: zfs -> libzfs -> libuuid)
	# @TODO: Add pkgconfig support instead.
	dh_shlibdeps -- --warnings=0

override_dh_strip:
	dh_strip -plibzfs1 --dbg-package=libzfs1-dbg
	dh_strip -pzfsutils --dbg-package=zfsutils-dbg

# TODO: report that make distclean don't cleans the dir created by make distdir
override_dh_auto_clean:
	dh_auto_clean
	rm -fr zfs-$(VERSION)
